@attribute [Route(AuthZAuthNOptionAuthenticationWithIdentityURI)]

<BaseForSideBarContent>
    <HeaderForSideBarContent>
        Optional Authentication
    </HeaderForSideBarContent>
    <ContentBlockForSideBarContent>
        When requiring authentication to specific portions of the site I use the following method to enable the ability to authenticate and authorize users in Blazor.
        I will start with describing how to configure tokens so that they can be used in the future to call other apis such like GraphAPI as show in the example. Followed by adding identity UI for authorization.
    </ContentBlockForSideBarContent>
    <CodeSnippetForSideBarContent>
 services.AddMicrosoftIdentityWebAppAuthentication(configuration, nameof(settings.AzureAdB2C))
    .EnableTokenAcquisitionToCallDownstreamApi()
    .AddDownstreamWebApi(nameof(settings.DownstreamAPI), configuration.GetSection(nameof(settings.DownstreamAPI)))
    .AddMicrosoftGraph(configuration.GetSection(nameof(settings.GraphApi)))
    .AddInMemoryTokenCaches();

services.AddControllersWithViews().AddMicrosoftIdentityUI();
    </CodeSnippetForSideBarContent>
    <CodeSnippetForSideBarContent>
app.UseCookiePolicy();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();
    </CodeSnippetForSideBarContent>
    <ContentBlockForSideBarContent>
        This website uses a security configuration via the CompositionRoot similar to the following.
    </ContentBlockForSideBarContent>
    <CodeSnippetForSideBarContent>
internal static IServiceCollection ConfigureSecurity(this IServiceCollection services, ConfigurationManager configuration)
{
    // This is required to be instantiated before the OpenIdConnectOptions starts getting configured.
    // By default, the claims mapping will map claim names in the old format to accommodate older SAML applications.
    // 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role' instead of 'roles'
    // This flag ensures that the ClaimsIdentity claims collection will be built from the claims in the token.
    JwtSecurityTokenHandler.DefaultMapInboundClaims = false;

    services.Configure&lt;CookiePolicyOptions&gt;(options =>
    {
        // This lambda determines whether user consent for non-essential cookies is needed for a given request.
        options.CheckConsentNeeded = context => true;
        options.MinimumSameSitePolicy = SameSiteMode.Strict;
        // Handling SameSite cookie according to https://docs.microsoft.com/en-us/aspnet/core/security/samesite?view=aspnetcore-3.1
        options.HandleSameSiteCookieCompatibility();
    });

    // Configuration to sign-in users with Azure AD B2C.

    services.AddMicrosoftIdentityWebAppAuthentication(configuration, "AzureAdB2C")
    .EnableTokenAcquisitionToCallDownstreamApi().AddInMemoryTokenCaches();

    services.AddControllersWithViews().AddMicrosoftIdentityUI();

    services.AddRazorPages();
    services.AddServerSideBlazor();
    return services;
}
    </CodeSnippetForSideBarContent>
    <ContentBlockForSideBarContent>
        Blazor authorization also requires changes to the App.razor file, an example can be found <a class="hover:underline brand-color" href="@AuthZAuthNConfigureAppCSURI">here.</a>
    </ContentBlockForSideBarContent>
</BaseForSideBarContent>