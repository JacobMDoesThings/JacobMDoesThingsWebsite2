@attribute [Route(DataCollectionDataCollectionServiceURI)]

<BaseForSideBarContent>
    <HeaderForSideBarContent>
        DataCollectionService 
    </HeaderForSideBarContent>
    <ContentBlockForSideBarContent>
        The DataCollectionService provides the way the site collections information like user-agent and page visits.
        DataCollectionService leverages <a class="hover:underline brand-color" href="@DataCollectionConsentManagerURI">IConsentServiceManager</a>, 
        <a class="hover:underline brand-color" href="@DataCollectionSessionUploadSchedulerServiceURI">ISessionUploadSchedulerService</a>,
        <b>JSRuntime</b> and <b>NavigationManager</b>. It also extends the <b>CircuitHandler</b> class that is provided for managing connections and circuits.
        I found out about the <b>CircuitHandler</b> <a class="hover:underline brand-color" target="_blank"
            href="https://stackoverflow.com/questions/61345537/detect-client-closing-connection-blazor">here on stackoverflow.</a>
        <br /><br />

        This service requires four methods to function: one function for when a connection is up, another for when a circuit is closed, 
        a <b>NavigationManager</b> change event handler for recording page navigation and finally, a method that subscribes to <a class="hover:underline brand-color" 
        href="@DataCollectionConsentManagerURI">IConsentServiceManager</a> <b>OnPropertyChange</b> event for the
        user's "sessionid" (The id stored in <b>ProtectedLocalStorage</b> to track returning users).
        <br /><br />
        <b>
            *** This feature no longer uses SessionUploadSchedulerService, instead it calls <a class="hover:underline brand-color"
             href="@ApiClientOdataServiceCallerURI">OdataServiceCaller</a> directly. ***
        </b>
        <br/>
        <br/>

        The following code section is a simple demonstration on the connection up and circuit down events.
    </ContentBlockForSideBarContent>
    <CodeSnippetForSideBarContent>
// When a circuit is closed I set the end time on the last visited page to the current time, this 
// is necessary because there will not be a navigation event associated with this page closing.
// Aftwards, I simply send this to the SessionUploadSchedulerService to be posted when it is ready to do so. 
public override async Task OnCircuitClosedAsync(Circuit circuit,
CancellationToken cancellationToken)
{
    if (_sessionInformation.PageVisits.Count &gt; 0)
    {
        _sessionInformation.PageVisits.Last().EndTime = DateTimeOffset.Now;
    }

    _sessionUploadSchedulerService.AddSessionInformationTask(_uniqueUserTrackingId ?? string.Empty, _sessionInformation);

    await base.OnCircuitClosedAsync(circuit, cancellationToken);
}

// OnConnectionUpAsync adds the TrackingId (if the user hasn't consented to data-collection it returns an empty string)
// and the UserAgent aka browswer information to the scoped session object.
public override async Task OnConnectionUpAsync(Circuit circuit,
CancellationToken cancellationToken)
{
    _sessionInformation.TrackingId = await _localStorageService.GetSessionIdAsync();
    _sessionInformation.UserAgent = await _runtime.InvokeAsync&lt;string&gt;("getUserAgent");
    await base.OnConnectionUpAsync(circuit, cancellationToken);
}
    </CodeSnippetForSideBarContent>
    <ContentBlockForSideBarContent>
        As stated above, this service is also dependent on the Blazor <b>NavigationManager</b>. I use this to check
        when a user navigates away from a page. When a user navigates away from a page, the EndTime for that page visit is
        set and a new PageVisit is created that has it's StarTime set to now and is added to the session.
    </ContentBlockForSideBarContent>
    <CodeSnippetForSideBarContent>
protected void NavigationManagerLocationChangeHandler(object? sender, EventArgs e)
{
    var endpoint = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
    _sessionInformation.PageVisits.Last().EndTime = DateTimeOffset.Now;
    _sessionInformation.PageVisits.Add(new PageVisitDTO()
    {
        URI = endpoint,
        StartTime = DateTimeOffset.Now
    });
}
    </CodeSnippetForSideBarContent>
    <ContentBlockForSideBarContent>
        Because I have a system for request consent for data collection I need to have a method for ensuring I only
        collect the long-running "TrackingId" for tracking between sessions when a user has given consent and hasn't 
        revoked consent. Initially, I tried to get the value from the <a class="hover:underline brand-color"
         href="@DataCollectionConsentManagerURI">IConsentServiceManager</a> in the OnCircuitClosedAsync event.
        This proved to cause issues with the task hanging and not completing the call to upload the data.
        <br/><br />
        This was solved by having the <a class="hover:underline brand-color"
        href="@DataCollectionConsentManagerURI">IConsentServiceManager</a> implement the <b>INotifyPropertyChanged</b> interface. Now I can extend the
        PropertyChanged event and update local variables accordingly. Here is what this looks like.<br/><br/>
    </ContentBlockForSideBarContent>
    <CodeSnippetForSideBarContent>
private async void OnSessionIdChangedAsync(object? sender, PropertyChangedEventArgs args)
{
    if (args.PropertyName == nameof(LocalStorageService.GetSessionIdAsync))
    {
        _sessionInformation.TrackingId = (await _localStorageService.GetSessionIdAsync());
    }
}
    </CodeSnippetForSideBarContent>
    <ContentBlockForSideBarContent>
        Finally, for the sake of completion, here is the constructor.
    </ContentBlockForSideBarContent>
    <CodeSnippetForSideBarContent>
public DataCollectionService(NavigationManager navigationManager, ISessionUploadSchedulerService&lt;SessionInformationDTO&gt; scheduler,
    IConsentServiceManager localStorageService, IJSRuntime jSRuntime)
{
    _runtime = jSRuntime;
    _navigationManager = navigationManager;
    _navigationManager.LocationChanged += NavigationManagerLocationChangeHandler;
    _sessionUploadSchedulerService = scheduler;
    _localStorageService = localStorageService;
    _localStorageService.PropertyChanged += OnSessionIdChangedAsync;

    // Sets the initial page.
    _sessionInformation.PageVisits.Add(new PageVisitDTO()
    {
        URI = _navigationManager.ToBaseRelativePath(_navigationManager.Uri),
        StartTime = DateTime.Now
    });
}
    </CodeSnippetForSideBarContent>
</BaseForSideBarContent>
